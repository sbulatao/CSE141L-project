; R0=0/1
; R1=GENERAL
; R2=DATA_LOW_ADDR, DATA_LOW
; R3=DATA_HIGH_ADDR, DATA_HIGH
; R4=TRAP
; R5=SGN
; R6=EXP
; R7=GENERAL 

;  LABEL_ABS: 22
;  LABEL_ABS_END: 35
;  LABEL_TRAP: 53
;  LABEL_TRAP_OK: 63
;  LABEL_TRAP_END: 67
;  LABEL_LOOP: 67
;  EXP_MINS_1: 84
;  LABEL_LOWERBIT_HELPER: 95
;  LABEL_LOWERBIT_HELPER_END: 99
;  LABEL_LOWERBIT: 107
;  LOOP_LOW: 114
;  EXP_MINS_1_LOW: 125
;  LABEL_FINISH_HELPER: 134
;  LABEL_FINISH_HELPER_END: 138
;  LABEL_FINISH: 153-166

LWI 0   ; ACC=0
MOV R3  ; R3=0
LWI 1   ; ACC=1
MOV R2  ; R2=1

; LOAD R2=DATA_LOW, R3=DATA_HIGH
LWR R2   ; ACC=MEM(R2)=DATA_LOW
MOV R2   ; R2=DATA_LOW
LWR R3   ; ACC=MEM(R3)=DATA_HIGH
MOV R3   ; R3=DATA_HIGH

; LOAD R6=21
LWI 7    ; ACC=7                ;HERE PC=8
SLL 2    ; ACC=7<<2=28
SUBI 7   ; ACC=28-7=21
MOV R6   ; R6=21

; LOAD R5=SGN
LWI 1   ; ACC=1
SLL 7   ; ACC=8'B1000_0000
AND R3  ; ACC=DATA_HIGH&1000_0000
BAN     ; ACC=SGN
MOV R5  ; R5=SGN                ; HERE PC=16
; DETERMINE WHETHER TO ABS      
LWI 1   ; ACC=1
MOV R0  ; R0=1
EQ R5 R0
BRC LABEL_ABS       ; IF R0=R5 (SGN=1), BRC offset=1, ok
JMP LABEL_ABS_END   ; ELSE, SKIP, pc=35, ok                 ; SO FAR SO GOOD (THEN GO TO LABEL_ABS_END)

; CALCULATE ABS VALUE
LABEL_ABS:                      ; PC=22 
LWR R7   ; ACC=8'B111
SLL 3    ; ACC=8'B1110_00
ADDI 7   ; ACC=8'B1111_11
SLL 2    ; ACC=8'B1111_1100
ADDI 3   ; ACC=8'B1111_1111
MOV R7   ; R7=8'B1111_1111
LWI 0    ; CLEAR ACC
OR R2    ; ACC=0|DATA_LOW = DATA_LOW
XOR R7   ; ACC=DATA_LOW^8'B1111_1111=~DATA_LOW
MOV R2   ; R2=UPDATED DATA_LOW
OR R3    ; ACC=0|DATA_HIGH = DATA_HIGH
XOR R7   ; ACC=DATA_HIGH^8'B1111_1111=~DATA_HIGH
MOV R3   ; R3=UPDATED DATA_HIGH
LABEL_ABS_END:                  ; PC=35

;LOAD R4=TRAP
LWI 0   ; CLEAR ACC
OR R2    ; ACC=0|DATA_LOW = DATA_LOW
BOR     ; ACC=|(DATA_LOW)
MOV R7   ; R7=|(DATA_LOW)
LWI 0   ; CLEAR ACC
OR R3    ; ACC=0|DATA_HIGH = DATA_HIGH
SLL 1   ; ACC=DATA_HIGH<<1 (GET RID OF SGN)
BOR     ; ACC=|(DATA_HIGH<<1)
AND R7   ; ACC=|(DATA_HIGH<<1) & |(DATA_LOW)=~TRAP
MOV R4   ; R4=~TRAP
LWI 0	; ACC=0
MOV R0	; R0=ACC=0
EQ R4 R0
BRC LABEL_TRAP	; IF R4=R0 (~TRAP=0), BRC offset=4, ok
LWI 4   ; ACC=4
SLL 4   ; ACC=4<<4=64
ADDI 3	; ACC=67    LABEL_TRAP_END; PC=67
JR							; SO FAR SO GOOD (THEN GO TO LABEL_TRAP_END)

LABEL_TRAP:                 ; PC=53
LWI 0	; ACC=0
MOV R0	; R0=ACC=0
EQ R5 R0
BRC LABEL_TRAP_OK          ; offset=6, ok
LWI 0	; ACC=0
MOV R6	; R6=ACC=0 (EXP=0)
LWI 5   ; ACC=5		; else, jump to LABEL_FINISH
SLL 5   ; ACC=5<<5=160
ADDI 0 	; ACC=160
JR

LABEL_TRAP_OK:             ; PC=63
LWI 5   ; ACC=5		; else, jump to LABEL_FINISH
SLL 5   ; ACC=5<<5=160
ADDI 0 	; ACC=160
JR
LABEL_TRAP_END:            ; PC=67
LABEL_LOOP:                 ; PC=67
; FIND_EXP
LWI 1	; ACC=1
MOV R0	; R0=1
SLL 6	; ACC=8'B0100_0000
MOV R7	; R7=8'B0100_0000
LWI 0	; CLEAR ACC
OR R3	; ACC=DATA_HIGH
AND R7	; ACC=DATA_HIGH&8'B0100_0000
BOR
MOV R7	; R7=(INT1[15]==1)
LWI 0	; ACC=0
MOV R0	; R0=0
EQ R7 R0
BRC EXP_mins_1		; if(INT1[15]==0), continue		offset=4, ok ; SO FAR SO GOOD (THEN GO TO EXP_mins_1)
LWI 5   ; ACC=5		; else, jump to LABEL_FINISH
SLL 5   ; ACC=5<<5=160
ADDI 0 	; ACC=160
JR                                                    ; SO FAR SO GOOD

EXP_mins_1:		; PC=84
OR R6	; ACC=R6=EXP
SUBI 1	; EXP=EXP-1
MOV R6	; EXP=UPDATED EXP
LWI 7	; ACC=7
SLL 1	; ACC=7<<1=14
ADDI 1	; ACC=15
MOV R7	; R7=15
EQ R6 R7	; IF(EXP=15)
BRC LABEL_LOWERBIT_HELPER        ; offset=2 ok      
EQ R0 R0  ; UNCONDITIONAL
BRC LABEL_LOWERBIT_HELPER_END    ; offset=4 ok

LABEL_LOWERBIT_HELPER:          ; PC=95
LWI 7   ; ACC=7						
SLL 4   ; ACC=7<<4=112
SUBI 5	; ACC=112-5=107         LABEL_LOWERBIT PC=107
JR
LABEL_LOWERBIT_HELPER_END:      ; PC=99

LWI 0	; CLEAR ACC
OR R3	; ACC=DATA_HIGH
SLL 1	; ACC<<1					
MOV R3  ; R3=UPDATED DATA_HIGH
LWI 1   ; ACC=1						
SLL 6   ; ACC=1<<6=64
ADDI 3	; ACC=64+3=67         LABEL_LOOP PC=67        ; SO FAR SO GOOD (THEN GO TO LABEL_LOOP)
JR

LABEL_LOWERBIT:             ; PC=107
LWI 1	; ACC=1
MOV R0	; R0=1
SLL 7	; ACC=8'B1000_0000
MOV R7	; R7=8'B1000_0000
LWI 0	; CLEAR ACC
OR R2	; ACC=DATA_LOW
MOV R4	; R4=DATA_LOW (BACK_UP)

LOOP_LOW:		    ; PC=114
AND R7	; ACC=DATA_HIGH&8'B1000_0000
BAN
MOV R7	; R7=(INT1[7]==1)
LWI 0	; ACC=0
MOV R0	; R0=0
EQ R7 R0
BRC EXP_mins_1_low	; if(INT1[7]==0) continue     offset=4, ok
LWI 5   ; ACC=5		; else, jump to LABEL_FINISH
SLL 5   ; ACC=5<<5=160
ADDI 0 	; ACC=160
JR

EXP_mins_1_low:		; PC=125
OR R6	; ACC=R6=EXP
SUBI 1	; EXP=EXP-1
MOV R6	; ACC=UPDATED ACC
LWI 7	; ACC=7
MOV R7	; R7=7
EQ R6 R7	; IF(EXP=7)
BRC LABEL_FINISH_HELPER     ; offset=2, OK
LWI 4   ; ACC=4
BRC LABEL_FINISH_HELPER_END ; offset=4, OK

LABEL_FINISH_HELPER:          ; PC=134
LWI 5   ; ACC=5		; else, jump to LABEL_FINISH
SLL 5   ; ACC=5<<5=160
ADDI 0 	; ACC=160
JR
LABEL_FINISH_HELPER_END:      ; PC=138

LWI 7   ; ACC=7
SLL 4   ; ACC=7<<4=112
ADDI 2	; ACC=114         LOOP_LOW PC=114
JR


LWI 0	; dummy
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LWI 0
LABEL_FINISH:		; PC=153-166
; SGN
OR R5    ; ACC=SGN
SLL 7    ; ACC=SGN<<7 (LSB:8)
MOV R1   ; R1=SGN|XXXXX|XX

; EXP
LWI 0    ; CLEAR ACC
OR R6    ; ACC=EXP
SLL 2    ; ACC=EXP<<2 (7:3)
OR R1   ; ACC=SGN|XXXXX|XX & 0|EXP|XX = SNG|EXP|XX
MOV R1   ; R1=SNG|EXP|XX

; MANTISSA_HIGH
LWI 7    ; ACC=8'B0000_0111       ; PC=174
SLL 3    ; ACC=8'B0011_1000
ADDI 7   ; ACC=8'B0011_1111
AND R3   ; ACC=8'B0011_1111 AND SHIFTED_DATA_HIGH
MOV R3   ; R3=MANTISSA_HIGH
LWI 3    ; ACC=8'B0000_0011
SLL 4    ; ACC=8'B0011_0000
AND R3   ; ACC=8'B0011_0000 AND SHIFTED_DATA_HIGH
SRL 4    ; ACC=8'B0000_00|MM
OR R1    ; ACC=SNG|EXP|MM
MOV R1   ; R1=SNG|EXP|MM

; HIGH 8 BITS AND STORE
LWI 1    ; ACC=1                  ; PC=185
MOV R7   ; R7=1
LWI 0    ; CLEAR ACC
OR R1    ; ACC=SNG|EXP|MM
STR R7   ; MEM(R0=1)=SNG|EXP|MM


