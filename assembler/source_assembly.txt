; R0=GENERAL
; R1=GENERAL
; R2=DATA_LOW_ADDR, DATA_LOW
; R3=DATA_HIGH_ADDR, DATA_HIGH
; R4=TRAP,GENERAL
; R5=SGN
; R6=EXP
; R7=GENERAL 

;  LABEL_ABS: 22
;  LABEL_OVERFLOW: 40
;  LABEL_ABS_END: 44
;  LABEL_TRAP: 62
;  LABEL_TRAP_EXP22: 72
;  LABEL_TRAP_END: 80
;  LABEL_LOOP: 80
;  EXP_MINS_1: 97
;  LABEL_LOWERBIT_HELPER: 108
;  LABEL_LOWERBIT_HELPER_END: 112
;  LABEL_LOWERBIT: 121
;  LOOP_LOW: 127
;  EXP_MINS_1_LOW: 138
;  LABEL_FINISH_HELPER: 147
;  LABEL_FINISH_HELPER_END: 151
;  LABEL_FINISH: 159
;  EXP_15_TO_7: 181
;  EXP_15_TO_7_END: 183
;  EXP_15_TO_7_STR: 200
;  EXP_15_TO_7_STR_END: 204
;  EXP_15_TO_7_STR_LOW: 229
;  EXP_15_TO_7_STR_LOW_END: 240
;  DONE: 255



LWI 0   ; ACC=0
MOV R2  ; R2=0
LWI 1   ; ACC=1
MOV R3  ; R3=1

; LOAD R2=DATA_LOW, R3=DATA_HIGH
LWR R2   ; ACC=MEM(R2)=DATA_LOW
MOV R2   ; R2=DATA_LOW
LWR R3   ; ACC=MEM(R3)=DATA_HIGH
MOV R3   ; R3=DATA_HIGH

; LOAD R6=21
LWI 7    ; ACC=7                ;HERE PC=8
SLL 2    ; ACC=7<<2=28
SUBI 7   ; ACC=28-7=21
MOV R6   ; R6=21

; LOAD R5=SGN
LWI 1   ; ACC=1
SLL 7   ; ACC=8'B1000_0000
AND R3  ; ACC=DATA_HIGH&1000_0000
BOR     ; ACC=SGN
MOV R5  ; R5=SGN                ; HERE PC=16
; DETERMINE WHETHER TO ABS      
LWI 1   ; ACC=1
MOV R0  ; R0=1
EQ R5 R0
BRC LABEL_ABS       ; IF R0=R5 (SGN=1), BRC offset=1, ok
JMP LABEL_ABS_END   ; ELSE, SKIP, pc=44, ok                 ; SO FAR SO GOOD (THEN GO TO LABEL_ABS_END)

; CALCULATE ABS VALUES
LABEL_ABS:                      ; PC=22 
SUBI 1   ; ACC = 0 - 1 = 8'B1111_1111
MOV R7   ; R7=8'B1111_1111
LWI 0    ; CLEAR ACC
; DATA_HIGH INVERSION
OR R3    ; ACC=0|DATA_HIGH = DATA_HIGH
XOR R7   ; ACC=DATA_HIGH^8'B1111_1111=~DATA_HIGH
MOV R3   ; R3=UPDATED DATA_HIGH
; DATA_LOW INVERSION
LWI 0    ; CLEAR ACC
OR R2    ; ACC=0|DATA_LOW = DATA_LOW
XOR R7   ; ACC=DATA_LOW^8'B1111_1111=~DATA_LOW
ADDI 1   ; ACC=~DATA_LOW+1
MOV R2   ; R2=UPDATED DATA_LOW
LWI 0    ; ACC=0
MOV R7   ; R7=0
EQ R7 R2 ; DATA_LOW==8'B0000_0000 (WILL overflow)
BRC LABEL_OVERFLOW               ; offset=6 OK
EQ R0 R0 ; UNCONDITIONAL
BRC LABEL_ABS_END   ; offset=5, OK

LWI 0   ; DUMMY   

LABEL_OVERFLOW:                 ; PC=40
LWI 0    ; ACC=0
OR R3    ; ACC=DATA_HIGH
ADDI 1   ; ACC=DATA_HIGH+1
MOV R3   ; R3=UPDATED DATA_HIGH
LABEL_ABS_END:                  ; PC=44

;LOAD R4=TRAP
LWI 0   ; CLEAR ACC
OR R2    ; ACC=0|DATA_LOW = DATA_LOW
BOR     ; ACC=|(DATA_LOW)
MOV R7   ; R7=|(DATA_LOW)
LWI 0   ; CLEAR ACC
OR R3    ; ACC=0|DATA_HIGH = DATA_HIGH
SLL 1   ; ACC=DATA_HIGH<<1 (GET RID OF SGN)
BOR     ; ACC=|(DATA_HIGH<<1)
OR R7   ; ACC=|(DATA_HIGH<<1) & |(DATA_LOW)=~TRAP
MOV R4   ; R4=~TRAP
LWI 0	; ACC=0
MOV R0	; R0=ACC=0
EQ R4 R0
BRC LABEL_TRAP	; IF R4=R0 (~TRAP=0), BRC offset=4, ok
LWI 5   ; ACC=5
SLL 4   ; ACC=5<<4=80
ADDI 0	; ACC=80    LABEL_TRAP_END; PC=80
JR							; SO FAR SO GOOD (THEN GO TO LABEL_TRAP_END)

LABEL_TRAP:                 ; PC=62
LWI 1	; ACC=1
MOV R0	; R0=ACC=1
EQ R5 R0; IF(SGN==1)
BRC LABEL_TRAP_EXP22  ;ELSE   offset=6, ok
LWI 0	; ACC=0
MOV R6	; R6=ACC=0 (EXP=0)
LWI 5   ; ACC=5		; else, jump to LABEL_FINISH
SLL 5   ; ACC=5<<5=160
SUBI 1 	; ACC=159
JR

LABEL_TRAP_EXP22:             ; PC=72             
LWI 5   ; ACC=5
ADDI 6  ; ACC=11
SLL 1   ; ACC=22
MOV R6  ; EXP=22
LWI 5   ; ACC=5		; else, jump to LABEL_FINISH
SLL 5   ; ACC=5<<5=160
SUBI 1 	; ACC=159
JR
LABEL_TRAP_END:            ; PC=80

LABEL_LOOP:                 ; PC=80
; FIND_EXP
LWI 1	; ACC=1
MOV R0	; R0=1
SLL 6	; ACC=8'B0100_0000
MOV R7	; R7=8'B0100_0000
LWI 0	; CLEAR ACC
OR R3	; ACC=DATA_HIGH
AND R7	; ACC=DATA_HIGH&8'B0100_0000
BOR
MOV R7	; R7=(INT1[15]==1)
LWI 0	; ACC=0
MOV R0	; R0=0
EQ R7 R0
BRC EXP_mins_1		; if(INT1[15]==0), continue		offset=4, ok ; SO FAR SO GOOD (THEN GO TO EXP_mins_1)
LWI 5   ; ACC=5		; else, jump to LABEL_FINISH
SLL 5   ; ACC=5<<5=160
SUBI 1 	; ACC=159
JR                                       ; SO FAR SO GOOD

EXP_mins_1:		; PC=97
OR R6	; ACC=R6=EXP
SUBI 1	; EXP=EXP-1
MOV R6	; EXP=UPDATED EXP
LWI 7	; ACC=7
SLL 1	; ACC=7<<1=14
ADDI 0	; ACC=14
MOV R7	; R7=14
EQ R6 R7	; IF(EXP=15)
BRC LABEL_LOWERBIT_HELPER        ; offset=2 ok      
EQ R0 R0  ; UNCONDITIONAL
BRC LABEL_LOWERBIT_HELPER_END    ; offset=4 ok

LABEL_LOWERBIT_HELPER:          ; PC=108
LWI 1   ; ACC=1						
SLL 7   ; ACC=1<<7=128
SUBI 7	; ACC=128-7=121         LABEL_LOWERBIT PC=121
JR
LABEL_LOWERBIT_HELPER_END:      ; PC=112

LWI 0	; CLEAR ACC
OR R3	; ACC=DATA_HIGH
SLL 1	; ACC<<1					
MOV R3  ; R3=UPDATED DATA_HIGH
LWI 5   ; ACC=5						
SLL 4   ; ACC=5<<4=80
ADDI 0	; ACC=80         LABEL_LOOP PC=80        ; SO FAR SO GOOD (THEN GO TO LABEL_LOOP)
JR

LWI 1
LABEL_LOWERBIT:             ; PC=121
LOOP_LOW:		            ; PC=121
LWI 1	; ACC=1
MOV R0	; R0=1
SLL 7	; ACC=8'B1000_0000
MOV R7	; R7=8'B1000_0000
LWI 0	; CLEAR ACC
OR R2	; ACC=DATA_LOW
AND R7	; ACC=DATA_LOW&8'B1000_0000
BOR
MOV R7	; R7=(INT1[7]==1)
LWI 0	; ACC=0
MOV R0	; R0=0
EQ R7 R0
BRC EXP_mins_1_low	; if(INT1[7]==0) continue     offset=4, ok
LWI 5   ; ACC=5		; else, jump to LABEL_FINISH
SLL 5   ; ACC=5<<5=160
SUBI 1 	; ACC=159
JR

EXP_mins_1_low:		; PC=138
OR R6	; ACC=R6=EXP
SUBI 1	; EXP=EXP-1
MOV R6	; ACC=UPDATED ACC
LWI 6	; ACC=6
MOV R7	; R7=6
EQ R6 R7	; IF(EXP=7)
BRC LABEL_FINISH_HELPER     ; offset=2, OK
EQ R0 R0   ; UNCONDITIONAL
BRC LABEL_FINISH_HELPER_END ; offset=4, OK

LABEL_FINISH_HELPER:          ; PC=147
LWI 5   ; ACC=5		; else, jump to LABEL_FINISH
SLL 5   ; ACC=5<<5=160
SUBI 1 	; ACC=159
JR
LABEL_FINISH_HELPER_END:      ; PC=151

LWI 0   ; CLEAR ACC
OR R2	; ACC=DATA_HIGH
SLL 1	; ACC<<1					
MOV R2  ; R3=UPDATED DATA_LOW
LWI 1   ; ACC=1
SLL 7   ; ACC=1<<7=128      LOOP_LOW PC=121
SUBI 7  ; ACC=121
JR


LABEL_FINISH:		; PC=159
; SGN
LWI 0    ; CLEAR ACC
OR R5    ; ACC=SGN
SLL 7    ; ACC=SGN<<7 (LSB:8)
MOV R1   ; R1=SGN|XXXXX|XX

; EXP
;LWI 0    ; CLEAR ACC
OR R6    ; ACC=EXP
SLL 2    ; ACC=EXP<<2 (7:3)
OR R1   ; ACC=SGN|XXXXX|XX & 0|EXP|XX = SNG|EXP|XX
MOV R1   ; R1=SNG|EXP|XX

LWI 0    ; CLEAR ACC
MOV R5   ; CLEAR R5
OR R6    ; ACC=EXP
SUBI 7   ; ACC=EXP-7
SUBI 7   ; ACC=EXP-14
SUBI 1   ; ACC=EXP-15
SRL 7    ; ACC=MSB
MOV R7   ; R7=(EXP<=15)
LWI 1    ; ACC=1
MOV R0   ; RO=1
EQ R0 R7 ; IF(EXP<=15)
BRC EXP_15_TO_7  ; offset=6, OK
EQ R0 R0 ; UNCONDITIONAL
BRC EXP_15_TO_7_END  ; offset=4, OK

EXP_15_TO_7:                                 ;PC=181
LWI 1    ; ACC=1
MOV R5   ; R5=1 (NOW R5 IS EXP<=15 FLAG)
EXP_15_TO_7_END:

; MANTISSA_HIGH
LWI 7    ; ACC=8'B0000_0111
SLL 3    ; ACC=8'B0011_1000
ADDI 7   ; ACC=8'B0011_1111
AND R3   ; ACC=8'B0011_1111 AND SHIFTED_DATA_HIGH
MOV R3   ; R3=MANTISSA_HIGH
LWI 3    ; ACC=8'B0000_0011
SLL 4    ; ACC=8'B0011_0000
AND R3   ; ACC=8'B0011_0000 AND SHIFTED_DATA_HIGH
SRL 4    ; ACC=8'B0000_00|MM
OR R1    ; ACC=SNG|EXP|MM           ; ASSUME EXP>15 (INVALID FOR EXP==16)
MOV R1   ; R1=SNG|EXP|MM

LWI 1    ; ACC=1
MOV R0   ; RO=1
EQ R0 R5 ; R5 IS EXP<=15 FLAG
BRC EXP_15_TO_7_STR  ; offset=7, OK          IF(EXP<=15)
EQ R0 R0 ; UNCONDITIONAL
BRC EXP_15_TO_7_STR_END  ;offset=5, OK       ELSE
EXP_15_TO_7_STR:                 ; PC=200
LWI 0    ; CLEAR ACC
SUBI 4   ; ACC=0-4=8'B1111_1100
AND R1    ; ACC=R1=SNG|EXP|00
MOV R1   ; R1=UPDATED SNG|EXP|00
EXP_15_TO_7_STR_END:             ; PC=204

; HIGH 8 BITS AND STORE
LWI 3    ; ACC=3                  
MOV R7   ; R7=3
LWI 0    ; CLEAR ACC
OR R1    ; ACC=SNG|EXP|MM
STR R7   ; MEM(R7=3)=SNG|EXP|MM                                         ; PC=208

;MANTISSA_LOW:
LWI 2    ; ACC=2
MOV R7   ; R7=2
LWI 0    ; CLEAR ACC
OR R6    ; ACC=EXP
SUBI 7   ; ACC=EXP-7
SUBI 7   ; ACC=EXP-14
SUBI 2   ; ACC=EXP-16
SRL 7    ; ACC=(EXP-16)>>7 (GET MSB)
BOR      ; ACC=EXP<16 FLAG
MOV R1   ; R1=EXP<16 FLAG
LWI 1    ; ACC=1
MOV R0   ; R0=1
EQ R0 R1 ; IF(EXP<16)
BRC EXP_15_TO_7_STR_LOW

LWI 7    ; ACC=7
SLL 3    ; ACC=7<<3=56
ADDI 4   ; ACC=60
SLL 1    ; ACC=120          ; JUMP TO EXP_15_TO_7_STR_LOW_END
SLL 1    ; ACC=240
JR

EXP_15_TO_7_STR_LOW:                ; PC=229
LWI 7    ; ACC=7
ADDI 7   ; ACC=14
SUB R6   ; ACC=14-EXP
MOV R0   ; R0=14-EXP
OR R2    ; ACC=DATA_LOW
SRLR R0  ; ACC=DATA_LOW>>(14-EXP)
STR R7   ; MEM(R7=2)=DATA_LOW                                           ; PC=235
LWI 2    ; ACC=2
SLL 7    ; ACC=2<<7=256         ; JUMP TO DONE
SUBI 1   ; ACC=255
JR
EXP_15_TO_7_STR_LOW_END:            ; PC=240

LWI 0    ; ACC=0
OR R6    ; ACC=EXP
SUBI 7   ; ACC=EXP-7
SUBI 7   ; ACC=EXP-14
SUBI 3   ; ACC=EXP-17
MOV R1   ; R1=EXP-17
LWI 0    ; CLEAR ACC
OR R2    ; ACC=DATA_LOW
SRLR R1  ; (E.G. EXP=19, R1=2) ACC=8'B00DATA_L
MOV R0   ; (E.G. EXP=19, R1=2) R0=8'B00DATA_L

LWI 0    ; ACC=0
OR R3    ; ACC=R3 (S|1XX_MM00)
SLL 4
OR R0    ; ACC=8'BMM00_0000|8'B00DATA_L=8'BGHDATA_L
STR R7   ; (E.G. EXP=19, R1=2) MEM(R7=2)=00DATA_L                       ; PC=254
; INVALID FOR EXP==16

DONE:    ; PC=255
LWI 0    ; DUMMY
